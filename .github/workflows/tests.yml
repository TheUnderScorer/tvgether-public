name: Tests
on:
  repository_dispatch:
    types: [ test ]

jobs:
  get-affected:
    name: Get affected projects
    runs-on: ubuntu-latest
    env:
      NX_BRANCH: ${{ github.event.client_payload.number || github.event.client_payload.ref }}
    outputs:
      affected: ${{ steps.affected.outputs.affected }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_ADMIN_TOKEN }}
          fetch-depth: 0
          repository: ${{ secrets.REPOSITORY }}
          ref: ${{ github.event.client_payload.github.ref }}

      - name: Set Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '19'

      - name: Cache
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: node_modules
          key: nodemodules-${{ hashFiles('package-lock.json') }}

      - name: Install npm dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Install action dependencies
        run: npm install --prefix .github/actions

      - name: Affected
        id: affected
        uses: ./.github/actions/list-affected
        with:
          base: 'origin/test'
          head: 'HEAD'

      - name: Output vars
        run: |
          echo "Affected: ${{ steps.affected.outputs.affected }}"
          echo "Affected JSON: ${{ fromJSON(steps.affected.outputs.affected) }}"

  units:
    if: ${{ github.event.client_payload.update_snapshots != 'true' }}
    name: Unit tests & linting
    runs-on: ubuntu-latest
    env:
      NX_BRANCH: ${{ github.event.client_payload.number || github.event.client_payload.ref }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_ADMIN_TOKEN }}
          fetch-depth: 0
          repository: ${{ secrets.REPOSITORY }}
          ref: ${{ github.event.client_payload.github.ref }}

      - name: Create GitHub App Installation Token
        uses: jnwng/github-app-installation-token-action@v2
        id: installation_token
        with:
          appId: ${{ secrets.GH_APP_ID }}
          installationId: ${{ secrets.GH_APP_INSTALLATION_ID }}
          privateKey: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          check_id: ${{github.event.client_payload.unit_tests_check_id}}
          token: ${{ steps.installation_token.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          status: "in_progress"
          repo: ${{ secrets.REPOSITORY }}
          details_url: ${{ github.server_url }}/TheUnderScorer/tvgether/actions/runs/${{ github.run_id }}

      - name: Set Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '19'

      - name: Cache
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: node_modules
          key: nodemodules-${{ hashFiles('package-lock.json') }}

      - name: Install npm dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Create .env file
        run: |
          echo "NX_ENABLE_DEBUG=true" >> .env
          echo "NX_DISABLE_TRACKING=true" >> .env
          echo "NX_WEBSITE_URL=http://localhost:3000" >> .env
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/db" >> .env

      - name: Start database
        run: docker-compose up -d db && sleep 10

      - name: Migrate database
        run: npx nx run backend-db:generate && npx nx run backend-db:migrate

      - name: Lint
        run: npx nx affected --target=lint --base=origin/test --head=HEAD --parallel=3

      - name: Test
        run: npx nx affected --target=test --base=origin/test --head=HEAD --parallel=3

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          token: ${{ steps.installation_token.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          conclusion: ${{ job.status }}
          status: "completed"
          repo: ${{ secrets.REPOSITORY }}
          check_id: ${{github.event.client_payload.unit_tests_check_id}}
          details_url: ${{ github.server_url }}/TheUnderScorer/tvgether/actions/runs/${{ github.run_id }}/jobs/${{ github.job }}

  e2e-browser-extension:
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [ 1, 2, 3 ]
        shardTotal: [ 3 ]
    name: Browser Extension e2e tests
    runs-on: ubuntu-latest
    if: ${{ fromJSON(needs.get-affected.outputs.affected).browser-extension }}
    env:
      NX_BRANCH: ${{ github.event.client_payload.number || github.event.client_payload.ref }}
    needs:
      - get-affected
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_ADMIN_TOKEN }}
          fetch-depth: 0
          repository: ${{ secrets.REPOSITORY }}
          ref: ${{ github.event.client_payload.github.ref }}

      - name: Create GitHub App Installation Token
        uses: jnwng/github-app-installation-token-action@v2
        id: installation_token
        with:
          appId: ${{ secrets.GH_APP_ID }}
          installationId: ${{ secrets.GH_APP_INSTALLATION_ID }}
          privateKey: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          check_id: ${{github.event.client_payload.e2e_browser_extension_check_id}}
          token: ${{ steps.installation_token.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          status: "in_progress"
          repo: ${{ secrets.REPOSITORY }}
          details_url: ${{ github.server_url }}/TheUnderScorer/tvgether/actions/runs/${{ github.run_id }}

      - name: Set Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '19'

      - name: Cache
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: node_modules
          key: nodemodules-${{ hashFiles('package-lock.json') }}

      - name: Install npm dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Setup playwright
        run: npx playwright install-deps && npx playwright install

      - name: Create .env file
        run: |
          cp .env.dist .env
          echo "NX_GIPHY_API_KEY=${{ secrets.GIPHY_API_KEY }}" >> .env
          echo "NX_SKIP_RATE_LIMIT=true" >> .env
          echo "NX_DISABLE_TRACKING=true" >> .env

      - name: Start database
        run: docker-compose up -d db && sleep 10

      - name: Migrate database
        run: npx nx run backend-db:generate && npx nx run backend-db:migrate

      - name: Build server
        run: npx nx run server:build:production --skip-nx-cache

      - name: Build website
        run: npx nx build website --production --skip-nx-cache
        env:
          NX_USE_SERVER_URL_RESOLVER: 'true'

      - name: Start server and website
        run: docker compose up -d server website && sleep 10
        env:
          NX_WEBSITE_URL: http://localhost:3000
          NX_CHROME_EXTENSION_STORE_URL: https://chrome.google.com/webstore/detail/tvgether/nnjgjgjgjgjgjgjgjgjgjgjg

      - name: Start video playground
        run: npx nx run video-playground:serve:production & sleep 10

      - name: Build extension
        run: npx nx build browser-extension --production --skip-nx-cache
        env:
          NX_WEBSITE_URL: http://localhost:3000
          NX_SERVER_URL: http://localhost:8080

      - name: Run tests
        if: ${{ github.event.client_payload.update_snapshots != 'true' }}
        run: npx nx run browser-extension-e2e:e2e  --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

      - name: Update snapshots
        if: ${{ github.event.client_payload.update_snapshots == 'true' }}
        run: npx nx run browser-extension-e2e:e2e --skip-nx-cache --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }} -g 'UI snapshots' --update-snapshots

      - uses: stefanzweifel/git-auto-commit-action@v4
        if: ${{ github.event.client_payload.update_snapshots == 'true' }}
        name: Commit changes
        with:
          commit_message: "test: update snapshots"

          # Optional. Options used by `git-commit`.
          # See https://git-scm.com/docs/git-commit#_options
          commit_options: '--no-verify --signoff'

          # Optional glob pattern of files which should be added to the commit
          # Defaults to all (.)
          # See the `pathspec`-documentation for git
          # - https://git-scm.com/docs/git-add#Documentation/git-add.txt-ltpathspecgt82308203
          # - https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec
          file_pattern: '*.png'

          # Optional. Local file path to the repository.
          # Defaults to the root of the repository.
          repository: .

          # Optional. Disable dirty check and always try to create a commit and push
          skip_dirty_check: true

          # Optional. Skip internal call to `git fetch`
          skip_fetch: true

          # Optional. Skip internal call to `git checkout`
          skip_checkout: true

          # Optional. Prevents the shell from expanding filenames.
          # Details: https://www.gnu.org/software/bash/manual/html_node/Filename-Expansion.html
          disable_globbing: true

      - name: Upload Artifact
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: browser-extension
          path: dist/apps/browser-extension

      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: test-artifact-${{ matrix.os }}-browser-extension
          path: artifacts

      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: browser-contexts
          path: apps/browser-extension-e2e/src/contexts/**/chrome_debug.log

      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: test-results-${{ matrix.os }}-browser-extension
          path: test-results

      - name: Print server logs
        if: ${{ always() }}
        run: docker compose logs server

      - name: Print website logs
        if: ${{ always() }}
        run: docker compose logs website

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          token: ${{ steps.installation_token.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          conclusion: ${{ job.status }}
          status: "completed"
          repo: ${{ secrets.REPOSITORY }}
          check_id: ${{github.event.client_payload.e2e_browser_extension_check_id}}
          details_url: ${{ github.server_url }}/TheUnderScorer/tvgether/actions/runs/${{ github.run_id }}/jobs/${{ github.job }}

  e2e-server:
    name: Server e2e tests
    runs-on: ubuntu-latest
    if: ${{ fromJSON(needs.get-affected.outputs.affected).server && github.event.client_payload.update_snapshots != 'true' }}
    env:
      NX_BRANCH: ${{ github.event.client_payload.number || github.event.client_payload.ref }}
    needs:
      - get-affected
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_ADMIN_TOKEN }}
          fetch-depth: 0
          repository: ${{ secrets.REPOSITORY }}
          ref: ${{ github.event.client_payload.github.ref }}

      - name: Create GitHub App Installation Token
        uses: jnwng/github-app-installation-token-action@v2
        id: installation_token
        with:
          appId: ${{ secrets.GH_APP_ID }}
          installationId: ${{ secrets.GH_APP_INSTALLATION_ID }}
          privateKey: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          check_id: ${{github.event.client_payload.e2e_server_check_id}}
          token: ${{ steps.installation_token.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          status: "in_progress"
          repo: ${{ secrets.REPOSITORY }}
          details_url: ${{ github.server_url }}/TheUnderScorer/tvgether/actions/runs/${{ github.run_id }}

      - name: Set Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '19'

      - name: Cache
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: node_modules
          key: nodemodules-${{ hashFiles('package-lock.json') }}

      - name: Install npm dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Create .env file
        run: |
          cp .env.dist .env
          echo "NX_SKIP_RATE_LIMIT=true" >> .env
          echo "NX_DISABLE_TRACKING=true" >> .env

      - name: Start database
        run: docker-compose up -d db && sleep 10

      - name: Migrate database
        run: npx nx run backend-db:generate && npx nx run backend-db:migrate

      - name: Build server
        run: npx nx run server:build:production

      - name: Start server
        run: docker compose up -d server && sleep 10
        env:
          NX_WEBSITE_URL: http://localhost:3000

      - name: Run tests
        run: npx nx run server-e2e:e2e --runInBand
        env:
          NX_ENABLE_DEBUG: false

      - name: Print server logs
        if: ${{ always() }}
        run: docker compose logs server

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          token: ${{ steps.installation_token.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          conclusion: ${{ job.status }}
          status: "completed"
          repo: ${{ secrets.REPOSITORY }}
          check_id: ${{github.event.client_payload.e2e_server_check_id}}
          details_url: ${{ github.server_url }}/TheUnderScorer/tvgether/actions/runs/${{ github.run_id }}/jobs/${{ github.job }}

